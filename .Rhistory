lines(c(x, x + xi), c(y, y + yi), col = "white", lwd = 2, lty = 1)
x <- x + xi
y <- y + yi
coord <- cbind(x,y)
steps[i,] <- coord
} #j
if (x > xmax | x < xmim | y > ymax | y < ymim) break
} #i
x <- 694000; y <- 2007599
points(x, y, pch = 17, col = "black", cex = 3)
points(habitat.data$X, habitat.data$Y, pch = 16, cex = 1, col = "black")
points(habitat.data$X, habitat.data$Y, pch = 21, cex = 1.5, col = "skyblue")
# -----
# extraer las coordenadas XY de cada paso del movimiento simulado, y convertir a un objeto espacial:
steps <- data.frame(steps)
colnames(steps) <- c("X","Y")
na.omit(steps)
stepsSP <- SpatialPoints(coords = na.omit(steps))
projection(stepsSP) <- proje
stepsSP
class(stepsSP)
# lo mismo con las CTs, crear un buffer de área de captura fotográfica
(CTs <- habitat.data[,2:3])
CT_sp <- SpatialPoints(coords = CTs)
class(CT_sp)
projection(CT_sp) <- proje
CT_sp
# dos operaciones para identificar las cámaras que "capturaron" animales:
CTs_buffer <- gBuffer(CT_sp, width = 25, byid = F)
CTs_inter <- gIntersection(stepsSP, CTs_buffer, byid = T)
if(is.null(CTs_inter)) {
cat("----------------------------")
cat("----- \n Ninguna cámara detectó al animal: \n")
0} else {
par(mfrow=c(1,1), mar = c(1,1,1,1))
plot(mi_mapa, col = mi_paleta, lty = 0)
points(x, y, pch = 17, col = "black", cex = 3)
###plot(HRr, add = T, border = "black")
plot(CTs_buffer, add = T, lwd = 2)
plot(stepsSP, add = T, pch = 16, col = "white", cex = 0.5)
plot(CTs_inter, pch = 21, col = "black", bg = "red", fill = T, cex = 2, add = T)
cat("----------------------------")
cat("----- \n Las cámara detectaron al animal: \n")
print(length(CTs_inter@coords[,1]))
cat("----- \n Las cámaras fueron: \n")
print(CTs_inter@coords)
cat("----- \n Los conteos por cámara fueron: \n")
table(CTs_inter@coords[,1])
cat("----------------------------")
}
par(mfrow=c(1,1), mar = c(1,1,1,1))
plot(mi_mapa, col = mi_paleta, lty = 0)
points(habitat.data$X, habitat.data$Y, pch = 16, cex = 1, col = "black")
# centro de actividad del individuo
x <- 694000; y <- 2007599
points(x, y, pch = 17, col = "black", cex = 2)
# distancia (m) recorrida x hora:
distancia <- 50
# distancia (m) recorrida al día:
(n <- 24 * distancia)
# home range (HR, hectáreas) hipotético:
HR <- 2000
# S = pi x radio2:
(r <- sqrt(HR*10000/pi))
xmax <- x+r;xmim <- x-r; ymax <- y+r; ymim <- y-r
CT <- cbind(x, y)
CT <- SpatialPoints(coords = CT)
HRr <- gBuffer(CT, width = r, byid = F)
plot(HRr, add = T, border = "black")
(steps <- array(NA, dim = c(n, 2)))
for (i in 1:n) {
for (j in 1:2) {
xi <- sample(c(distancia, 0, (-1 * distancia)),1)
yi <- sample(c(distancia, 0, (-1 * distancia)),1)
lines(c(x, x + xi), c(y, y + yi), col = "white", lwd = 2, lty = 1)
x <- x + xi
y <- y + yi
coord <- cbind(x,y)
steps[i,] <- coord
} #j
if (x > xmax | x < xmim | y > ymax | y < ymim) break
} #i
x <- 694000; y <- 2007599
points(x, y, pch = 17, col = "black", cex = 3)
points(habitat.data$X, habitat.data$Y, pch = 16, cex = 1, col = "black")
points(habitat.data$X, habitat.data$Y, pch = 21, cex = 1.5, col = "skyblue")
# -----
# extraer las coordenadas XY de cada paso del movimiento simulado, y convertir a un objeto espacial:
steps <- data.frame(steps)
colnames(steps) <- c("X","Y")
na.omit(steps)
stepsSP <- SpatialPoints(coords = na.omit(steps))
projection(stepsSP) <- proje
stepsSP
class(stepsSP)
# lo mismo con las CTs, crear un buffer de área de captura fotográfica
(CTs <- habitat.data[,2:3])
CT_sp <- SpatialPoints(coords = CTs)
class(CT_sp)
projection(CT_sp) <- proje
CT_sp
# dos operaciones para identificar las cámaras que "capturaron" animales:
CTs_buffer <- gBuffer(CT_sp, width = 25, byid = F)
CTs_inter <- gIntersection(stepsSP, CTs_buffer, byid = T)
if(is.null(CTs_inter)) {
cat("----------------------------")
cat("----- \n Ninguna cámara detectó al animal: \n")
0} else {
par(mfrow=c(1,1), mar = c(1,1,1,1))
plot(mi_mapa, col = mi_paleta, lty = 0)
points(x, y, pch = 17, col = "black", cex = 3)
###plot(HRr, add = T, border = "black")
plot(CTs_buffer, add = T, lwd = 2)
plot(stepsSP, add = T, pch = 16, col = "white", cex = 0.5)
plot(CTs_inter, pch = 21, col = "black", bg = "red", fill = T, cex = 2, add = T)
cat("----------------------------")
cat("----- \n Las cámara detectaron al animal: \n")
print(length(CTs_inter@coords[,1]))
cat("----- \n Las cámaras fueron: \n")
print(CTs_inter@coords)
cat("----- \n Los conteos por cámara fueron: \n")
table(CTs_inter@coords[,1])
cat("----------------------------")
}
par(mfrow=c(1,1), mar = c(1,1,1,1))
plot(mi_mapa, col = mi_paleta, lty = 0)
points(habitat.data$X, habitat.data$Y, pch = 16, cex = 1, col = "black")
# centro de actividad del individuo
x <- 694000; y <- 2007599
points(x, y, pch = 17, col = "black", cex = 2)
# distancia (m) recorrida x hora:
distancia <- 50
# distancia (m) recorrida al día:
(n <- 24 * distancia)
# home range (HR, hectáreas) hipotético:
HR <- 2000
# S = pi x radio2:
(r <- sqrt(HR*10000/pi))
xmax <- x+r;xmim <- x-r; ymax <- y+r; ymim <- y-r
CT <- cbind(x, y)
CT <- SpatialPoints(coords = CT)
HRr <- gBuffer(CT, width = r, byid = F)
plot(HRr, add = T, border = "black")
(steps <- array(NA, dim = c(n, 2)))
for (i in 1:n) {
for (j in 1:2) {
xi <- sample(c(distancia, 0, (-1 * distancia)),1)
yi <- sample(c(distancia, 0, (-1 * distancia)),1)
lines(c(x, x + xi), c(y, y + yi), col = "white", lwd = 2, lty = 1)
x <- x + xi
y <- y + yi
coord <- cbind(x,y)
steps[i,] <- coord
} #j
if (x > xmax | x < xmim | y > ymax | y < ymim) break
} #i
x <- 694000; y <- 2007599
points(x, y, pch = 17, col = "black", cex = 3)
points(habitat.data$X, habitat.data$Y, pch = 16, cex = 1, col = "black")
points(habitat.data$X, habitat.data$Y, pch = 21, cex = 1.5, col = "skyblue")
# -----
# extraer las coordenadas XY de cada paso del movimiento simulado, y convertir a un objeto espacial:
steps <- data.frame(steps)
colnames(steps) <- c("X","Y")
na.omit(steps)
stepsSP <- SpatialPoints(coords = na.omit(steps))
projection(stepsSP) <- proje
stepsSP
class(stepsSP)
# lo mismo con las CTs, crear un buffer de área de captura fotográfica
(CTs <- habitat.data[,2:3])
CT_sp <- SpatialPoints(coords = CTs)
class(CT_sp)
projection(CT_sp) <- proje
CT_sp
# dos operaciones para identificar las cámaras que "capturaron" animales:
CTs_buffer <- gBuffer(CT_sp, width = 25, byid = F)
CTs_inter <- gIntersection(stepsSP, CTs_buffer, byid = T)
if(is.null(CTs_inter)) {
cat("----------------------------")
cat("----- \n Ninguna cámara detectó al animal: \n")
0} else {
par(mfrow=c(1,1), mar = c(1,1,1,1))
plot(mi_mapa, col = mi_paleta, lty = 0)
points(x, y, pch = 17, col = "black", cex = 3)
###plot(HRr, add = T, border = "black")
plot(CTs_buffer, add = T, lwd = 2)
plot(stepsSP, add = T, pch = 16, col = "white", cex = 0.5)
plot(CTs_inter, pch = 21, col = "black", bg = "red", fill = T, cex = 2, add = T)
cat("----------------------------")
cat("----- \n Las cámara detectaron al animal: \n")
print(length(CTs_inter@coords[,1]))
cat("----- \n Las cámaras fueron: \n")
print(CTs_inter@coords)
cat("----- \n Los conteos por cámara fueron: \n")
table(CTs_inter@coords[,1])
cat("----------------------------")
}
par(mfrow=c(1,1), mar = c(1,1,1,1))
plot(mi_mapa, col = mi_paleta, lty = 0)
points(habitat.data$X, habitat.data$Y, pch = 16, cex = 1, col = "black")
# centro de actividad del individuo
x <- 694000; y <- 2007599
points(x, y, pch = 17, col = "black", cex = 2)
# distancia (m) recorrida x hora:
distancia <- 50
# distancia (m) recorrida al día:
(n <- 24 * distancia)
# home range (HR, hectáreas) hipotético:
HR <- 100
# S = pi x radio2:
(r <- sqrt(HR*10000/pi))
xmax <- x+r;xmim <- x-r; ymax <- y+r; ymim <- y-r
CT <- cbind(x, y)
CT <- SpatialPoints(coords = CT)
HRr <- gBuffer(CT, width = r, byid = F)
plot(HRr, add = T, border = "black")
(steps <- array(NA, dim = c(n, 2)))
for (i in 1:n) {
for (j in 1:2) {
xi <- sample(c(distancia, 0, (-1 * distancia)),1)
yi <- sample(c(distancia, 0, (-1 * distancia)),1)
lines(c(x, x + xi), c(y, y + yi), col = "white", lwd = 2, lty = 1)
x <- x + xi
y <- y + yi
coord <- cbind(x,y)
steps[i,] <- coord
} #j
if (x > xmax | x < xmim | y > ymax | y < ymim) break
} #i
x <- 694000; y <- 2007599
points(x, y, pch = 17, col = "black", cex = 3)
points(habitat.data$X, habitat.data$Y, pch = 16, cex = 1, col = "black")
points(habitat.data$X, habitat.data$Y, pch = 21, cex = 1.5, col = "skyblue")
# -----
# extraer las coordenadas XY de cada paso del movimiento simulado, y convertir a un objeto espacial:
steps <- data.frame(steps)
colnames(steps) <- c("X","Y")
na.omit(steps)
stepsSP <- SpatialPoints(coords = na.omit(steps))
projection(stepsSP) <- proje
stepsSP
class(stepsSP)
# lo mismo con las CTs, crear un buffer de área de captura fotográfica
(CTs <- habitat.data[,2:3])
CT_sp <- SpatialPoints(coords = CTs)
class(CT_sp)
projection(CT_sp) <- proje
CT_sp
# dos operaciones para identificar las cámaras que "capturaron" animales:
CTs_buffer <- gBuffer(CT_sp, width = 50, byid = F)
CTs_inter <- gIntersection(stepsSP, CTs_buffer, byid = T)
if(is.null(CTs_inter)) {
cat("----------------------------")
cat("----- \n Ninguna cámara detectó al animal: \n")
0} else {
par(mfrow=c(1,1), mar = c(1,1,1,1))
plot(mi_mapa, col = mi_paleta, lty = 0)
points(x, y, pch = 17, col = "black", cex = 3)
###plot(HRr, add = T, border = "black")
plot(CTs_buffer, add = T, lwd = 2)
plot(stepsSP, add = T, pch = 16, col = "white", cex = 0.5)
plot(CTs_inter, pch = 21, col = "black", bg = "red", fill = T, cex = 2, add = T)
cat("----------------------------")
cat("----- \n Las cámara detectaron al animal: \n")
print(length(CTs_inter@coords[,1]))
cat("----- \n Las cámaras fueron: \n")
print(CTs_inter@coords)
cat("----- \n Los conteos por cámara fueron: \n")
table(CTs_inter@coords[,1])
cat("----------------------------")
}
#################################################
# FIN SCRIPT
par(mfrow=c(1,1), mar = c(1,1,1,1))
plot(mi_mapa, col = mi_paleta, lty = 0)
points(habitat.data$X, habitat.data$Y, pch = 16, cex = 1, col = "black")
# centro de actividad del individuo
x <- 694000; y <- 2007599
points(x, y, pch = 17, col = "black", cex = 2)
# distancia (m) recorrida x hora:
distancia <- 50
# distancia (m) recorrida al día:
(n <- 24 * distancia)
# home range (HR, hectáreas) hipotético:
HR <- 100
# S = pi x radio2:
(r <- sqrt(HR*10000/pi))
xmax <- x+r;xmim <- x-r; ymax <- y+r; ymim <- y-r
CT <- cbind(x, y)
CT <- SpatialPoints(coords = CT)
HRr <- gBuffer(CT, width = r, byid = F)
plot(HRr, add = T, border = "black")
(steps <- array(NA, dim = c(n, 2)))
for (i in 1:n) {
for (j in 1:2) {
xi <- sample(c(distancia, 0, (-1 * distancia)),1)
yi <- sample(c(distancia, 0, (-1 * distancia)),1)
lines(c(x, x + xi), c(y, y + yi), col = "white", lwd = 2, lty = 1)
x <- x + xi
y <- y + yi
coord <- cbind(x,y)
steps[i,] <- coord
} #j
if (x > xmax | x < xmim | y > ymax | y < ymim) break
} #i
x <- 694000; y <- 2007599
points(x, y, pch = 17, col = "black", cex = 3)
points(habitat.data$X, habitat.data$Y, pch = 16, cex = 1, col = "black")
points(habitat.data$X, habitat.data$Y, pch = 21, cex = 1.5, col = "skyblue")
# -----
# extraer las coordenadas XY de cada paso del movimiento simulado, y convertir a un objeto espacial:
steps <- data.frame(steps)
colnames(steps) <- c("X","Y")
na.omit(steps)
stepsSP <- SpatialPoints(coords = na.omit(steps))
projection(stepsSP) <- proje
stepsSP
class(stepsSP)
# lo mismo con las CTs, crear un buffer de área de captura fotográfica
(CTs <- habitat.data[,2:3])
CT_sp <- SpatialPoints(coords = CTs)
class(CT_sp)
projection(CT_sp) <- proje
CT_sp
# dos operaciones para identificar las cámaras que "capturaron" animales:
CTs_buffer <- gBuffer(CT_sp, width = 50, byid = F)
CTs_inter <- gIntersection(stepsSP, CTs_buffer, byid = T)
if(is.null(CTs_inter)) {
cat("----------------------------")
cat("----- \n Ninguna cámara detectó al animal: \n")
0} else {
par(mfrow=c(1,1), mar = c(1,1,1,1))
plot(mi_mapa, col = mi_paleta, lty = 0)
points(x, y, pch = 17, col = "black", cex = 3)
###plot(HRr, add = T, border = "black")
plot(CTs_buffer, add = T, lwd = 2)
plot(stepsSP, add = T, pch = 16, col = "white", cex = 0.5)
plot(CTs_inter, pch = 21, col = "black", bg = "red", fill = T, cex = 2, add = T)
cat("----------------------------")
cat("----- \n Las cámara detectaron al animal: \n")
print(length(CTs_inter@coords[,1]))
cat("----- \n Las cámaras fueron: \n")
print(CTs_inter@coords)
cat("----- \n Los conteos por cámara fueron: \n")
table(CTs_inter@coords[,1])
cat("----------------------------")
}
#################################################
# FIN SCRIPT
dir.create("Results")
wildlife.data <- read.csv("data/mamiferos.csv", header = T)
habitat.data <- read.csv("data/habitat.csv", header = T)
datos <- merge(x = wildlife.data, y = habitat.data, by = "Camera", all = TRUE)
View(datos)
rm(list = ls()) # para borrar la memoria
dev.off() # para borrar los gráficos
wildlife.data <- read.csv("data/mamiferos.csv", header = T)
habitat.data <- read.csv("data/habitat.csv", header = T)
datos <- merge(x = wildlife.data, y = habitat.data, by = "Camera", all = TRUE)
source("RAI_eR_Beta.R")
# cargar shape y reproyectar si es necesario
map <- shapefile("shapes/veg.shp")
proje <- "+proj=utm +zone=14 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"
library(raster)
# cargar shape y reproyectar si es necesario
map <- shapefile("shapes/veg.shp")
proje <- "+proj=utm +zone=14 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"
map <- spTransform(map, proj)
map <- spTransform(map, proje)
map <- spTransform(map, proje)
# OJO: Craer paleta de colores para cada tipo de vegetación(o cualquier otras clasificación. O emplear los colores de R (eg., topo.colors, heat.colors, u otro):
my_colors <- c("gold", "deepskyblue2", "darkolivegreen4", "darkolivegreen1", "azure3", "darkorange2")
# Función:
Map_CTs(map, my_colors)
RAIeR_gral(datos)
dev.off() # para borrar los gráficos
RAIeR_gral(datos)
Event_CT(datos, c("Bas_ast", "Nas_nar"), parRow = 1, parCol = 2, pointSize = 2, labels = T)
Event_CT(datos, c("Syl_flo", "Odo_vir", "Can_lat", "Uro_cin", "Mep_mac", "Pro_lot", "Pec_taj", "Bas_ast", "Nas_nar"), parRow = 3, parCol = 3, pointSize = 0.35, labels = F)
RAIeR_ct(datos, Ymax = 30)
source("RAI_eR_Beta.R")
RAIeR_ct(datos, Ymax = 30)
RAIeR_test(Ymax = 30)
RAIeR_test(Ymax = 20)
RAIeR_test(Ymax = 15)
RAIeR_matx()
RAIeR_test <- function(Ymax) {
require(xtable)
require(agricolae)
table2 <- read.csv("Results/Table_RAIeR_ct.csv", header = T)
RAIeRaov <- aov(RAIeRalt ~ Species-1, data = table2)
cat("----- \n RAIeR comparasion among species \n")
print(summary(RAIeRaov))
mod <- summary(RAIeRaov)
anova <- xtable(mod)
View(anova)
write.csv(anova, "Results/Table_ANOVA.csv")
# Posterior comparison:
P <- as.numeric(unlist(summary.aov(RAIeRaov)[[1]][5]))[1]
ifelse(P < 0.05, { # if P significative then:
# Tukey test:
jpeg(filename = "Results/Tukey_test.jpg", width = 7000, height = 10000, units = "px", res = 1200)
par(mfcol = c(1,1))
plot(TukeyHSD(RAIeRaov), cex.axis = 0.5, las = 1)
dev.off()
# ---------
par(mfcol = c(1,1))
plot(TukeyHSD(RAIeRaov), cex.axis = 0.5, las = 1)
# HSD test:
out_1 <- HSD.test(RAIeRaov, "Species")
out2 <- out_1$groups
jpeg(filename = "Results/HSD_test.jpg", width = 7000, height = 5000, units = "px", res = 1200)
par(mfcol = c(1,1))
bar.group(out_1$groups, horiz = F, las = 2, cex.main = 2, font = 3, cex.axis = 0.9, plot = T, col = "lightblue", ylim = c(0, Ymax),   names.arg = out_1$trt, ylab = "RAIeR")
dev.off()
# ---------
par(mfcol = c(1,1))
bar.group(out_1$groups, horiz = F, las = 2, cex.main = 2, font = 3, cex.axis = 0.9, plot = T, col = "lightblue", ylim = c(0, Ymax),   names.arg = out_1$trt, ylab = "RAIeR")
}, NA) # if P not significant
} # end function
RAIeR_ct(datos, Ymax = 30)
RAIeR_glm(datos, family = "poisson")
RAIeR_final(datos)
RAIeR_final(datos)
RAIeR_glm(datos, family = "poisson")
RAIeR_final(datos)
RAIeR_final(datos)
source("RAI_eR_Beta.R")
RAIeR_final(datos)
Esri_CTs(habitat.data)
RAIeR_mapSp(species = "Odo_vir", pointSize = 0.1, mycolors = my_colors)
# PASO 3. Cargar el paquete RAI:
source("RAI_eR_Beta.R")
RAIeR_mapSp(species = "Odo_vir", pointSize = 0.1, mycolors = my_colors)
RAIeR_mapSp("Can_lat", pointSize = 0.85, my_colors)
RAIeR_mapSp("Lin_ruf", pointSize = 1, my_colors)
Esri_RAIeR(habitat.data)
RAIeR_glmSp(Species = "Pro_lot", covs = "Goats", family = "poisson")
# PASO 3. Cargar el paquete RAI:
source("RAI_eR_Beta.R")
RAIeR_glmSp(Species = "Pro_lot", covs = "Goats", family = "poisson")
RAIeR_glmSp(Species = "Odo_vir", covs = c("Kernel_cam", "Kernel_gps", "Kernel_todos", "Goats"), family = "poisson")
RAIeR_kernelSp("Uro_cin", S = 0.9, HR = 95, pointSize =  20, proje = proje, mycolors = hcl.colors(99, palette = "viridis", alpha = NULL, rev = F))
# PASO 3. Cargar el paquete RAI:
source("RAI_eR_Beta.R")
RAIeR_kernelSp("Uro_cin", S = 0.9, HR = 95, pointSize =  20, proje = proje, mycolors = hcl.colors(99, palette = "viridis", alpha = NULL, rev = F))
# PASO 3. Cargar el paquete RAI:
source("RAI_eR_Beta.R")
RAIeR_kernelSp("Uro_cin", S = 0.9, HR = 95, pointSize =  20, proje = proje, mycolors = hcl.colors(99, palette = "viridis", alpha = NULL, rev = F))
RAIeR_kernelSp("Syl_flo", S = 0.9, HR = 95, pointSize =  20, proje = proje, mycolors = hcl.colors(99, palette = "viridis", alpha = NULL, rev = F))
miGrid(n1 = 7, n2 = 5, CTx = 690500, CTy = 2007000, CTdist = 1000, proje = proje)
# PASO 3. Cargar el paquete RAI:
source("RAI_eR_Beta.R")
miGrid(n1 = 7, n2 = 5, CTx = 690500, CTy = 2007000, CTdist = 1000, proje = proje)
proje2 <- CRS("+proj=utm +zone=14 +datum=WGS84 +towgs84=0,0,0")
# PASO 3. Cargar el paquete RAI:
source("RAI_eR_Beta.R")
# Función:
Map_CTs(map, my_colors)
Esri_CTs(habitat.data, proje2)
Esri_RAIeR(Species = "Pro_lot", proje2)
# PASO 3. Cargar el paquete RAI:
source("RAI_eR_Beta.R")
Esri_RAIeR(Species = "Pro_lot", proje2)
# PASO 3. Cargar el paquete RAI:
source("RAI_eR_Beta.R")
Esri_RAIeR(Species = "Pro_lot", proje2)
Esri_RAIeR(Species = "Uro_cin", proje2)
# PASO 3. Cargar el paquete RAI:
source("RAI_eR_Beta.R")
Esri_RAIeR(Species = "Uro_cin", proje2)
Esri_RAIeR(Species = "Uro_cin", proje2)
Esri_RAIeR(Species = "Odo_vir", proje2)
# PASO 3. Cargar el paquete RAI:
source("RAI_eR_Beta.R")
Esri_RAIeR(Species = "Odo_vir", proje2)
# PASO 3. Cargar el paquete RAI:
source("RAI_eR_Beta.R")
Esri_RAIeR(Species = "Odo_vir", proje2)
# PASO 3. Cargar el paquete RAI:
source("RAI_eR_Beta.R")
Esri_RAIeR(species = "Odo_vir", proje2)
Esri_RAIeR(species = "Pro_lot", proje2)
# PASO 3. Cargar el paquete RAI:
source("RAI_eR_Beta.R")
Esri_RAIeR(species = "Pro_lot", proje2, pointsize = 5)
Esri_RAIeR(species = "Can_lat", proje2, pointsize = 5)
Esri_RAIeR(species = "Can_lat", proje2, pointsize = 3)
Esri_RAIeR(species = "Uro_cyn", proje2, pointsize = 3)
Esri_RAIeR(species = "Uro_cin", proje2, pointsize = 3)
Esri_RAIeR(species = "Uro_cin", proje2, pointsize = 0.5)
Esri_RAIeR(species = "Uro_cin", proje2, pointsize = 0.9)
source("RAI_eR_Beta.R")
Esri_RAIeR(species = "Uro_cin", proje2, pointsize = 0.9)
source("RAI_eR_Beta.R")
Esri_RAIeR(species = "Uro_cin", proje2, pointsize = 0.9)
Esri_RAIeR(species = "Uro_cin", proje2, pointsize = 0.9)
RAIeR_ct(datos, Ymax = 30) # OJO: Ymax para ajustar el eje Y
Esri_RAIeR(species = "Uro_cin", proje2, pointsize = 0.9)
source("RAI_eR_Beta.R")
Esri_RAIeR(species = "Uro_cin", proje2, pointsize = 0.9)
Esri_RAIeR(species = "Uro_cin", proje2, pointsize = 0.9)
source("RAI_eR_Beta.R")
Esri_RAIeR(species = "Uro_cin", proje2, pointsize = 0.9)
source("RAI_eR_Beta.R")
Esri_RAIeR(species = "Uro_cin", proje2, pointsize = 0.9)
Esri_RAIeR(species = "Syl_flo", proje2, pointsize = 0.9)
Esri_RAIeR(species = "Syl_flo", proje2, pointsize = 0.5)
source("RAI_eR_Beta.R")
Esri_RAIeR(species = "Syl_flo", proje2, pointsize = 0.5)
Esri_CTs(habitat.data, proje2)
